#!/usr/bin/env ruby
require_relative 'moodledocker-common.rb'
require 'fileutils'

def up(name)
  puts "Checking if nginx-proxy is running"
  nginxproxy = `docker ps -f name=nginx-proxy -q`
  if (nginxproxy.strip == "")
     nginxproxy = `docker ps -a -f name=nginx-proxy -q`
     if (nginxproxy.strip == "")
	puts "There is no container with name nginx-proxy"
	puts "Make sure you downloaded the correct container and execute something like:"
	puts "docker run --name nginx-proxy -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy"
     else 
        print "Starting nginx-proxy"
        `docker start nginx-proxy`
        puts " ... done"
     end
  end
  path = "#{MoodleDocker.base_dir}/#{name}"
  puts "Switch to base directory #{path}"
  FileUtils.cd(path) do
    success = system "docker-compose up -d"
    if !success
      return false;
    end

    puts "Containers for #{name} running."
    puts "  Access the site at: http://localhost/#{name}"

    postgresinterface = `docker-compose port db 5432`
    mysqlinterface = `docker-compose port db 3306`
    if postgresinterface.include? ':'
      postgresport = postgresinterface.split(":")[1].strip
      puts "  Access the database using: psql -p #{postgresport} -h localhost -U testdb    [Password: hello]"
    elsif mysqlinterface.include? ':'
      mysqlport = mysqlinterface.split(":")[1].strip
      puts "  Access the database using: mysql -h 127.0.0.1 -P #{mysqlport} -u testdb -D testdb -p    [Password: hello]"
    end

    puts "  Shutdown containers using: moodledocker-control #{name} down"
  end

  return true
end

def down(name)
  path = "#{MoodleDocker.base_dir}/#{name}"
  puts "Switch to base directory #{path}"
  FileUtils.cd(path) do
    return system "docker-compose down"
  end
end

if ARGV.length != 2 || !["up", "down", "restart"].include?(ARGV[1]) then
  puts "Usage: moodledocker-control NAME COMMAND"
  puts "\tCOMMAND must be one of ['up', 'down', 'restart']."
  exit
end

name = ARGV[0]
cmd = ARGV[1]

if !MoodleDocker.name_valid? (name)
  exit!
end

if !MoodleDocker.project_exists?(name)
  puts "Error: Project #{name} does not exist."
  exit!
end

if !(case cmd
      when "up"
        up name
      when "down"
        down name
      when "restart"
        down name
        up name	
     end)
  exit!
end

